현대 웹 개발의 절차)
요구사항 -> 서비스 기획 -> UI, UX 상세 설계 -> GUI 디자인 -> 퍼블리싱 -> 백엔드 API 개발 -> 프론트엔드 개발 -> QA

프론트엔드 개발자의 역할)
	- 화면단 코드 작성.
	- 기획, 디자인, 퍼블리싱, 백엔드 개발자와 소통.

사용 할 API 문서)
swagger / API 문서를 자동으로 제작해 주는 도구. 즉, 프론트앤드 개발자가 이해할수있는 형태의 문서로 만들어주는 역할. swagger.io

Dev Stack)
	- Vue.js 2.6.10
	- Vue Router
	- Vuex
	- Axios
	- Vue Test Utils
	
개발 환경)
	- Chrome
	- Git
	- VSCode
	- Node.js LTS
	- Vue.js Dev Tools

VSCode Plugin) 
터미널 단축키 : ctrl+shift+p 
	- Vetur	(Vue tooling Plugin)
	- Vue VSCode Snippets (Vue tooling Plugin)
	- Night Owl (color theme)
	-	material icon theme	(file icon theme)
	-	live Server (local Server reload)		// 로컬:5500로 매핑.


API 서버 프로젝트 구성)
https://github.com/joshua1988/vue-til-server 참고

Clone : https://github.com/joshua1988/vue-til-server.git

root 폴더에서 
$git clone https://github.com/joshua1988/vue-til-server.git

node version : 10.16.3  npm version : 6.9.0 //nvm을 이용해서 바꾸자.

vue-til-server에서 npm install	// package.json 안에 정의한 라이브러리 설치.

npm run dev		//서버 실행.	3000 port로 됨. 근데, 나는 3000번에 gitea를 사용하고 있어서, app.js에서 4000으로 수정했다.


DB 연동)
app.js 에 
 'mongodb+srv://test:1234@cluster0-ypgh5.mongodb.net/test?retryWrites=true&w=majority'
 고쳐야 한다. 		//내 DB가 아니니까 ㅎㅎ

MongoDB cloud)
로컬에 설치 할 수도 있지만, 클라우드 서비스로 제공되는 MongoDB를 이용해서 연결한다.
https://www.mongodb.com/cloud

google로 회원가입 완료.

DB Project 생성)
	Name : My Project 으로 생성.
	Build a DataBase 클릭 =>  Free로 해야 한다. cluster0 ,
		- Database Access	: test , 1234
		- Network Access : 자동으로 현재 IP로 되어 있다. add ip address에서 0.0.0.0/0 으로 any로 전체 허용.

localhost:4000/api/doc에서 /signup에
test@abc.com , 1234, 테스트유저1로 execute 해보기. 200은 성공. 만약 409 뜨면, 아래와 같이 하면 해결 된다.
409에러 해결 - Database User Privileges의 Built-in Role 을 Atlas admin으로 하면 에러가 해결.

정상적으로 잘 되면, DB 연결까지 잘 된 상태이다.

Vue CLI 설치 => $npm install -g @vue/cli  최신버전 설치 완료. 5.0.8	//여기서 버전 안맞아서 안되서 특정 버전 설치 해야 한다.
$npm install -g @vue/cli@4.1.1
정상 설치 확인) vue --version

SPA 생성) 
에러발생 - ~/.vuerc may be outdated. Please delete it and re-run vue-cli in manual mode // .vuerc 문제가 있어 보여서 .vuerc_bak으로 변경 후 다시 create하니까 됬다.
$vue create vue-til
순서대로) manually select features => Babel, Linter, Unit => ESLint + Prettier => Lint on save => Jest => dedicatede config files => n

설치 된 vue-til 폴더 구조)
	- node_modules : package.json의 정의된 Library가 설치된 폴더. 
	- package.json : Maven의 pom.xml과 같은 파일.
	- public 폴더 : 프로젝트 배포에 필요한 파일이 있는 폴더.
	- src 폴더 : source 폴더
	- tests 폴더 : 유닛 테스팅 관련 폴더. (Jest)
	- .browserslistrc , .eslintrc.js, bable.config.js, jet.config.js : create할 때 dedicated config files를 선택해서 각자의 config.js로 나눠 만들어졌다.

"eslint": "^6.7.2"를 5.16.0으로 변경 후 npm install eslint 버전 변경.
그리고 settings.json에 
{ "eslint.workingDirectories": [ { "mode": "auto" } ]} 추가.


vue cli 3 이후 부터는 화면에 오버레이로 eslint 에러가 뜬다.
그래서 무시하고도 개발 할 수 있게 설정해야 한다.
1. 최상단 폴더에 vue.config.js 생성.
2. vue.config.js에 
module.exports = { devServer: { overlay: false } }; 넣기.


.eslintrc.js 설정)
	정의 ? 자바스크립트 코드에서 발견 된 문제 패턴을 식별하기 위한 정적 코드 분석 도구.
	
	설정값에는 많은 기능들이 있다.
	여기서,  
	rules: {
    "no-console": process.env.NODE_ENV === "production" ? "warn" : "off",
    "no-debugger": process.env.NODE_ENV === "production" ? "warn" : "off",
  }
	이 부분만 좀 볼 예정이다. "no-console" : error 로 바꿔보자.
	그러면, vue에 console.log("test")를 기입하면 에러가 뜬다.
	즉, rules는 말 그대로 규칙이다.

	주의사항!! 설정 파일은 변경 되면, 자동 reload가 아니다. 서버를 재실행 해야 한다!!!

Prettier ? Code 정리 도구.
eslint에서 prettier를 설정해야 하는 이유 ? eslint의 rules와 충돌이 나기 때문에, eslint가 우선시 되어야 한다.

eslint에 prettier 적용하는 방법)
	.eslintrc.js에 rules에 삽입.
	"prettier/prettier": ['error', {
      singleQuote: true,
      semi: true,
      useTabs: true,
      tabWidth: 2,
      trailingComma: 'all',
      printWidth: 80,
      bracketSpacing: true,
      arrowParens: 'avoid',
    }]

ctrl + ,  단축키 => 설정 가진다.
eslint 검색 후, 맨아래쪽에 ESLint:validate 부분에 edit settings.json을 눌러서
"editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "eslint.workingDirectories": [
    {"mode": "auto"}
  ],
"eslint.validate": [
        {
            "language": "vue",
            "autoFix": true
        },
        {
            "language": "javascript",
            "autoFix": true
        },
        {
            "language": "javascriptreact",
            "autoFix": true
        },
        {
            "language": "typescript",
            "autoFix": true
        },
        {
            "language": "typescriptreact",
            "autoFix": true
        },
    ],
		추가 한다.

그리고 에러가 떴던 소스로 가서, 저장하면 자동으로 룰에 맞게 고쳐진다!!
Prettier의 플러그인은 끄기.

자잘한 에러들은 다 처리 했다.
